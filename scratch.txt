TODO List-------
* Utilize custom GTR protein exchangabilities (simulation/main.py or evolve.py)
* Historian and baliphy to use same substitution/indel model and fixed parameters
* Fixed number of iterations vs. until convergence
* Historian/Baliphy parallelization
* Sample run


Issues ----
* Tree is unrooted with Pfam data

Metrics -----
* SP, TC (alignments)
* RF, RFL (trees)
* Convergence (ESS, MCT)
* Parameter Accuracy

Posterior Decoding: cut-range C1.P1.fastas --skip=200 | alignment-chop-internal --tree treetraceCCD1-MAP.tree | alignment-max > C1-max.fasta

Convergence: ESS has reached target of 200 means burn-in is over (how long ESS takes to reach 200)
Mixing: ESS after X iterations/time

Experiment 1: Testing convergence with fixed number of iterations (convergence/iteration)
* IVs: Number of iterations (time plot)
* DVs (at each iteration): ESS, 

Experiment 2: Testing convergence with fixed amount of time (convergence/time)



====== Experiment 1: Mixing and Convergence ======
Experimental Set-up:
    For each sequenence in (1 sequences/category ~ 4 sequences):
        Run Historian/Baliphy for ______ iterations
            * provide exact parameters and model
        For each iteration (x):
            Record current wall-clock time (y1)
            Record to log (y2):
                * Current parameter likelihood
                * Current topology likelihood
        
        Measure time/iterations to Burn-in: parameter/topology (ESS == 200)
        Measure ESS after _____ iterations: parameter/topology
        Measure ESS after _____ time: parameter/topology


====== Experiment 2: Accuracy and Parameter Recovery ======
Experimental Set-up:
    For each sequence in (5 sequences/category ~ 20 sequences):
        Run Historian/Baliphy for _____ iterations
            * provide model (not other parameters)
            Measure wall-clock time

        Calculate metrics: SP, TC, RF, RFL, Parameter Accuracy, etc.


Output Statistics Tables (seq_1/results)----

SEQUENCE INFORMATION
seq_1 | model | colles_index | num_taxa | indel_Rate | num_iter (optional)
seq_2 |
.
.
.

HISTORIAN OUTPUT
seq_1 | wall_clock_time | spfn | spfp | tc | rf_dist | rfl_dist | indel_mse | gamma_mse | invar_mse | ESS | MCT
seq_2
.
.
.

BALI-PHY OUTPUT
seq_1 | wall_clock_time | spfn | spfp | tc | rf_dist | rfl_dist | indel_mse | gamma_mse | invar_mse | ESS | MCT
seq_2
.
.
.

Points to hit about program ----
* Creation of a "topological" consensus tree
* Multivariate distribution and sampling
* Guide tree generation
* Indel-seq-gen (custom protein gtr matrix, generating indel distribution... issues with that)
* RFL scores 
* Mixing statistics... ESS, MCT, ASDSF

Questions -----
* Controlled number of iterations?... how do they work with historian?
* Which datasets would be best? (mamillian X chromosomes from orthoDB and more?)
* Same substitution/indel models for baliphy and historian?
* "new best log likelihood", trace files for historian 
* Historian speed and how iterations/sequence works
* Memory errors

behavior per iter and second
* no sampling parameters


tree1_copy = eTree(tree1.clone().as_string('newick'))


POSSIBLE IMPROVEMENTS -------
* Fit various new forms of BD models (+ removing coalescent processing)
* NNI integration into phased/batched simulated annealing
* Add estimated max gap dist (extract_params.py and modelfit.py)
* Adding rooting method to pfam data




Evaluation Procedure--------
1. Run Historian/BAliphy on Dataset: 
    python src/simulation/main.py data/model_gen/SCOPtype1/experiment1_parameters.csv SCOPt1e1
2. Parse Historian Trace File:
    python src/simulation/trace_parser.py historian data/simulation/SCOPt1e1/seq_1/historian/trace.log data/simulation/SCOPt1e1/seq_1/historian/parsed_trace.log --trees --sequences
3. Parse BAliphy Trace File: 
    python src/simulation/trace_parser.py baliphy data/simulation/SCOPt1e1/seq_1/baliphy-1/C1.trees data/simulation/SCOPt1e1/seq_1/baliphy-1/cleaned.trees --trees
4. Run TreeStat2 on Each cleaned tree trace file (save as 'treetrace.log')
    Parameters: CCD1 RF distance, CCD1 information content (log(p)), Colless tree-imbalance, Tree Length, Tree Topology
5. Combine/Clean TreeStat Output
    python src/simulation/clean_treestat.py data/simulation/SCOPt1e1/seq_1/historian/treetrace.log data/simulation/SCOPt1e1/seq_1/historian/parsed_trace.log data/simulation/SCOPt1e1/seq_1/historian/combined_trace.log
    python src/simulation/clean_treestat.py data/simulation/SCOPt1e1/seq_1/baliphy-1/treetrace.log data/simulation/SCOPt1e1/seq_1/baliphy-1/C1.log data/simulation/SCOPt1e1/seq_1/baliphy-1/combined_trace.log
6. Compute MCMC Statistics
    python src/simulation/convergence.py data/simulation/SCOPt1e1/seq_1/historian/combined_trace.log data/simulation/SCOPt1e1/seq_1/historian/mcmcStats
    python src/simulation/convergence.py data/simulation/SCOPt1e1/seq_1/baliphy-1/combined_trace.log data/simulation/SCOPt1e1/seq_1/baliphy-1/mcmcStats
7. Compute Output Statistics
    python src/simulation/comparison.py data/simulation/SCOPt1e1/seq_1/historian/outputStats comparison_results.csv
    python src/simulation/comparison.py data/simulation/SCOPt1e1/seq_1/baliphy-1/outputStats comparison_results.csv

8. Compile Statistics
    python src/utils/compile_results.py data/model_gen data/simulation data/results